0-1背包问题(0-1 Knapsack Problem)：给定n种物品和一背包。物品i的重量是wi，价值为vi，背包的容量为c。如何选择装入背包的物品，使得装入背包中物品的总价值最大?

//0-1背包问题：最优值m(1,c)的实现。
void knapsack(int v[],int *w,int c,int n,int**m)
{
    int jmax=min(w[n]-1,c); //1) 仅可选物品n时，容量为j的子问题的最优值
    for(int j=0; j<=jmax; j++) 
	m[n][j]=0; //注意j为整数
    for(int j=w[n]; j<=c; j++) 
	m[n][j]=v[n];
    for(int i=n-1;i>1;i--) //2) 逐步增加物品数至n及容量至c
    { 
	jmax=min(w[i]-1,c); //仅可选物品i时，容量为j的子问题的最优值
	for(int j=0; j<=jmax; j++) 
	    m[i][j]=m[i+1][j];
	for(int j=w[i]; j<=c; j++) 
	    m[i][j]=max(m[i+1][j], m[i+1][j-w[i]]+v[i]);
    }
    m[1][c]=m[2][c]; //处理物品1，最后一件的边界情况
    if(c>=w[1]) 
	m[1][c]=max(m[1][c],m[2][c-w[1]]+v[1]);
}

说明：
1) 数组m用于保存子问题的最优值；
2) 根据m[i][c]和m[i+1][c]的大小关系可判断物品是否 装入；
3) 算法时间复杂度也为：O(nc)，空间复杂度为：O(n2)

//0-1背包问题：构造最优解。
int traceback(int **m, int *w, int c, int n, int *x)
{
    for(int i=1; i<n; i++) 
    {
	if(m[i][c]==m[i+1][c])
	    x[i]=0; //二者相等说明物品i不装入
	else
	{
	    x[i]=1;
	    c= c- w[i];
	}
	x[n]=(m[n][c])?1:0;
    }
}
说明：
1) x[i]为0表示物品i不装入，为1表示装入；
2) 算法时间复杂度也为：O(n)


算法改进的基础 ：函数m(i, j)随着j的单调不减跳跃特征。

根据函数m(i, j)随着j的单调不减跳跃特征，则有： 1) 因此容量j不仅可为整数，也可以为实数。 2) 对于j为实数时，m(i, j)的值可通过记录跳跃点，然后查表来确定。令p[i]表示m(i, j)的全部跳跃点，显然p[i]是一个递增升序排列。

//改进的最优值求解算法实现
template<class T>
T Knapsack(int n,int c,T v[],T w[],T p[][2],int x[])
{
    int *head=new int[n+2];
    head[n+1]=0;
    p[0][0]=0;
    p[0][1]=0;
    int left=0,right=0,next=1;
    head[n]=1;
    for(int i=n;i>=1;i--)
    {
	int k=left;
	for(int j=left;j<=right;j++)
	{
	    if(p[j][0]+w[i]>c) break;
	    T y=p[j][0]+w[i],
	    m=p[j][1]+v[i];
	    while(k<=right && p[k][0]<y)
	    {
		p[next][0]=p[k][0];
		p[next][1]=p[k][1];
		next++;
		k++;
    	    }
    	    if(k<=right && p[k][0]==y)
    	    {
    		if(m<p[k][1]) m=p[k][1];
		k++;
    	    }
	    if(m>p[next-1][1])
	    {
		p[next][0]=y;
		p[next][1]=m;
		next++;
	    }
	    while(k<=right && p[k][1]<=p[next-1][1])
	    {
		k++;
	    }
	}
	while(k<=right)
	{
	    p[next][0]=p[k][0];
	    p[next][1]=p[k][1];
	    next++;
	    k++;
	}
	left=right+1;
	right=next-1;
	head[i-1]=next;
    }
    Traceback(n, w, v, p, head, x);
    return p[next-1][1];
}

//改进的回溯求解算法实现
template<class T>
void Traceback(int n,T w[],T v[],T p[][2],int *head,int x[])
{
    T j=p[head[0]-1][0],
    m=p[head[0]-1][1];
    for(int i=1;i<=n;i++)
    {
	x[i]=0;
	for(int k=head[i+1];k<=head[i]-1;k++)
	{
	    if(p[k][0]+w[i]==j && p[k][1]+v[i]==m)
	    {
		x[i]=1;
		j=p[k][0];
		m=p[k][1];
		break;
	    }
	}
    }
}