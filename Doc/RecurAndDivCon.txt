    递归(Recursion)：直接或间接地调用自身的算法称为递归算法。使用函数自身给出定义的函数称为递归函数。
    分治法(Divide-and-Conquer) ：将难以直接解决的大规模问题，分割成一些规模较小的相同问题，以各个击破，分而治之。
    分治和递归常常同时应用于解决大规模问题。
    
    递归算法的特点
    优点：结构清晰，可读性强，易用数学归纳法来证明算法的正确性，为设计算法、调试程序提供了参考。
    缺点：运行效率较低，一般地，时间复杂性和空间复杂性都比非递归算法要高。
    
    分治法的基本思想(Divide-and-Conquer) 
    规模为n的问题分成k个规模较小的子问题去解，这些子问题一般相互独立且与原问题相同。在递归地求出这些子问题的解之后，就可合并得到原问题的解。

    采用分治法所能解决的问题的特征
    Divide：问题可分解为若干个规模较小的相同问题；
    Conquer：问题规模缩小到一定的程度可容易解决；
    Combine：子问题的解可合并为该问题的解；
    各个子问题一般是相互独立的，即子问题之间不包含公共的子问题。

    分治法的算法设计模式
    divide-and-conquer(P) 
    { 
        if ( | P | <= n0) adhoc(P); //解决小规模的问题 
        divide P into smaller subinstances P1,P2,...,Pk；//分解问题
        for (i=1; i<=k; i++)
            yi=divide-and-conquer(Pi); //递归解决各子问题
        return merge(y1,...,yk); //将各子问题的解合并为原问题的解
    }
    其中：
    1) P表示待解决的问题，|P|表示问题的规模；
    2) Pi表示问题P的子问题，yi表示子问题Pi的解。