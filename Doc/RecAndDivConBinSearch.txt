    搜索问题：对于给定的已按升序排列的n个元素a[0:n-1]，从中查找出某特定元素x。
  
    采用分治法所能解决的问题的特征
   Divide：问题可分解为若干个规模较小的相同问题；
   Conquer：问题规模缩小到一定的程度可容易解决；
   Combine：子问题的解可合并为该问题的解；
   各个子问题一般是相互独立的，即子问题之间不包含公共的子问题。 显然，搜索问题以上特征都符合，可以采用分治法解决。

    二分搜索的基本思想：将n个元素分成个数大致相同的两半，取a[n/2]与待查找的元素x相比较：
   如a[n/2]=x，则找到；
   如a[n/2]>x，则在数组的左半部查找；
   如a[n/2]<x，则在数组的右半部查找。
    

    二分搜索技术
    template<class Type>
    int BinarySearch(Type a[], const Type& x, int l, int r)
    {
        while (r >= l)
        {
            int m = (l+r)/2;
            if (x == a[m]) return m;
            if (x < a[m]) r = m-1;
            else l = m+1;
        }
        return -1;
    }

    算法复杂性：最坏情况为O(logn)，最好情况为O(1)。