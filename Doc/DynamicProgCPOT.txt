凸多边形最优三角剖分:
 多边形( Polygon)：它是由平面(Plane)上一系列直线段首尾相连而成。各直线段称为边(Side)。连接直线的点称为顶点(Vertex)。
 简单多边形(Simple Polygon)：该多边形的边除了顶点之外没有交点。
 凸多边形(Convex Polygon)：它是一个简单多边形，且该多边形内部或边界上任意两点的连线上所有点都在其内部。

 多边形的表示：用多边形顶点的逆时针序列表示凸多边形，即P={v0,v1,…,vn-1}表示具有n条边(v0v1, v1v2,…, vn-1vn，其中vn=v0)的凸多边形。
 弦(Chord)的定义：若vi与vj是多边形上不相邻的2个顶点，则直线段vivj称为多边形的一条弦。弦将多边形分割成2个多边形{vi,vi+1,…,vj}和{vj,vj+1,…vi}。
 多边形的三角剖分(Triangulation)问题：指将多边形P分割成互不相交的三角形。对于用于分割的弦的集合T，多边形P内任意一条不在集合T内的弦必与集合T内的某条弦相交。
 定理：集合T中共有n-3条弦并多边形P剖分成n-2个三角形。

 多边形的最优三角剖分问题： 对于给定凸多边形P，以及定义在由多边形的边和弦组成的三角形上的权函数w。要求确定该凸多边形的三角剖分，使得该三角剖分中诸三角形上的权之和为最小。
 定义在三角形上的权函数(Weight)示例：
1) 权函数定义：w(vi,vj,vk)=|vivj|+|vjvk|+|vkvi|，其中|vivj|表示顶点vi和顶点vj之间的欧氏距离(Euclidean Distance)；
2) 定义在上述权函数w上的最优三角剖分是最小弦长三角剖分。

//凸多边形的最优三角剖分问题：解最优值实现。
public void minWeightTriangulation(int n, int **t, int **s) 
{ 
    for (int i = 1; i <= n; i++) 
    t[i][i] = 0; //2个顶点的 多边形 
    for (int r = 2; r <= n; r++) // 逐步增加顶点数 
    { 
        for (int i = 1; i <= n - r + 1; i++) 
	{
	    int j = i + r - 1;
	    t[i][j] = t[i + 1][j] + weight(i - 1, i, j); //从k=i开始，省略了
	    t[i][i] s[i][j] = i; 
	    for (int k = i + 1; k < j; k++) //逐步移动顶点k的位置 
	    { 
		int u = t[i][k] + t[k + 1][j] + weight(i - 1, k, j); 
		if (u < t[i][j])
		{ 
		    t[i][j] = u; 
		    s[i][j] = k; 
		} 
	    } 
	} 
    } 
}

说明： 
1) 数组t用于保存子问题的最优值； 
2) 数组s[i][j]保存了与vi-1和vi一起构成三角形的第3个顶点； 
3) 算法时间复杂度也为：O(n^3)； 
4) 算法空间复杂度为：O(n^2)